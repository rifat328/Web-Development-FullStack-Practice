What is Prototype Chain in JavaScript?
=>The prototype chain in JavaScript refers to the chain of objects
 linked by their prototypes. When a property or method is accessed on an object,
JavaScript first checks the object itself. If it doesn't find it there, 
it looks up the property or method in the object's prototype. This process continues,
moving up the chain from one prototype to the next, until the property or 
method is found or the end of the chain is reached 
(typically the prototype of the base object, which is null). 
The prototype chain is fundamental to JavaScript's prototypal inheritance model,
 allowing objects to inherit properties and methods from other objects.
 const roadmap = {
  getRoadmapUrl() {
    console.log(`https://roadmap.sh/${this.slug}`);
  },
};

const javascript = {
  name: 'JavaScript Roadmap',
  description: 'Learn JavaScript',
  slug: 'javascript',
  greet() {
    console.log(`${this.name} - ${this.description}`);
  },
};

Object.setPrototypeOf(javascript, roadmap); // or javascript.__proto__ = roadmap;

javascript.getRoadmapUrl(); // https://roadmap.sh/javascript
javascript.greet(); // JavaScript Roadmap - Learn JavaScript

In the above example, the javascript object inherits the getRoadmapUrl() method 
from the roadmap object. This is because the javascript object's prototype is set to 
the roadmap object using the Object.setPrototypeOf() method. In the javascript object,
 the getRoadmapUrl() method is not found, so JavaScript looks up the prototype chain and
  finds the getRoadmapUrl() method in the roadmap object

The IIFE (Immediately Invoked Function Expression)
 is a JavaScript function that runs as soon as it is defined.
 (function(){
    console.log("hello World");
 })();

 The IIFE is frequently used to create a new scope to avoid 
 variable hoisting from within blocks.
 (function () {
  var roadmap = 'JavaScript';
  console.log(roadmap);
})();

console.log(roadmap); // ReferenceError: name is not defined

Inheritance is a way to create a new Class from an existing Class.
 The new Class inherits all the properties and methods from the
  existing Class. The new Class is called the child Class, 
  and the existing Class is called the parent Class.
  class Roadmap {
  constructor(name, description, slug) {
    this.name = name;
    this.description = description;
    this.slug = slug;
  }

  getRoadmapUrl() {
    console.log(`https://roadmap.sh/${this.slug}`);
  }
}

class JavaScript extends Roadmap {
  constructor(name, description, slug) {
    super(name, description, slug);
  }

  greet() {
    console.log(`${this.name} - ${this.description}`);
  }
}

const js = new JavaScript(
  'JavaScript Roadmap',
  'Learn JavaScript',
  'javascript'
);

js.getRoadmapUrl(); // https://roadmap.sh/javascript
js.greet(); // JavaScript Roadmap - Learn JavaScript
In the above example, the JavaScript class inherits the getRoadmapUrl() method from the Roadmap class. 
This is because the JavaScript class extends the Roadmap class
 using the extends keyword. In the JavaScript class, the 
 getRoadmapUrl() method is not found, so JavaScript looks up 
 the prototype chain and finds the getRoadmapUrl() method in 
 the Roadmap class.

Map is another data structure in JavaScript 
which is similar to Object but the key can be of any type.
 It is a collection of elements where each element is stored as a
  Key, value pair.
 It is also known as a Hash table or a dictionary.
 The key can be of any type but the value can be of any type. 
 The key is unique and immutable, whereas the value can be mutable
  or immutable.

const roadmap = new Map();
roadmap.set('name', 'JavaScript');
roadmap.set('type', 'dynamic');
roadmap.set('year', 1995);

console.log(roadmap.get('name')); // JavaScript

roadmap.delete('year');
console.log(roadmap.has('year')); // false
console.log(roadmap.size); // 2

roadmap.clear();
console.log(roadmap.size); // 0

Set is another data structure in JavaScript which is similar to Array but the values are unique. It is a collection of elements
 where each element is stored as a value without any keys.
 const roadmap = new Set();
roadmap.add('JavaScript');
roadmap.add('JavaScript');

roadmap.add('dynamic');
roadmap.add(1995);

console.log(roadmap.size); // 3, because the value 'JavaScript' is already present in the set
console.log(roadmap.has('JavaScript')); // true

roadmap.delete('JavaScript');
console.log(roadmap.has('JavaScript')); // false
console.log(roadmap.size); // 2

There are serveral ways to find unique values in an array. Here are some of them:
    Using Set:
    const roadmaps = ['JavaScript', 'React', 'Node.js', 'Node.js', 'JavaScript'];
const uniqueRoadmaps = [...new Set(roadmaps)];
console.log(uniqueRoadmaps); // ['JavaScript', 'React', 'Node.js']

    Using filter():
    const roadmaps = ['JavaScript', 'React', 'Node.js', 'Node.js', 'JavaScript'];
    const uniqueRoadmaps = roadmaps.filter(
    (roadmap, index) => roadmaps.indexOf(roadmap) === index
    );
    console.log(uniqueRoadmaps); // ['JavaScript', 'React', 'Node.js']
-------------------------------------------------------------
    Using reduce()
    const roadmaps = ['JavaScript', 'React', 'Node.js', 'Node.js', 'JavaScript'];
    const uniqueRoadmaps = roadmaps.reduce((unique, roadmap) => {
    return unique.includes(roadmap) ? unique : [...unique, roadmap];
    }, []);
    console.log(uniqueRoadmaps); // ['JavaScript', 'React', 'Node.js']
--------------------------------------------------------
    Using forEach()
    const roadmaps = ['JavaScript', 'React', 'Node.js', 'Node.js', 'JavaScript'];
    const uniqueRoadmaps = [];
    roadmaps.forEach((roadmap) => {
    if (!uniqueRoadmaps.includes(roadmap)) {
        uniqueRoadmaps.push(roadmap);
    }
    });
    console.log(uniqueRoadmaps); // ['JavaScript', 'React', 'Node.js']
--------------------------------------------------------------
    Using for...of
    const roadmaps = ['JavaScript', 'React', 'Node.js', 'Node.js', 'JavaScript'];
    const uniqueRoadmaps = [];
    for (const roadmap of roadmaps) {
    if (!uniqueRoadmaps.includes(roadmap)) {
        uniqueRoadmaps.push(roadmap);
    }
    }
    console.log(uniqueRoadmaps); // ['JavaScript', 'React', 'Node.js']
    ----------------------------------------------------------

# A promise in js represent a value that may not be available
     yet but will be at some point.
    Promise provide a way to handle asynchronous operation.
    offering methods like then(), catch() to register callbacks for success and
    failure.

# The async/await, introduced in ES2017,
 provides a more readable and cleaner way to handle asynchronous
  operations compared to callbacks and promises. 
  An async function always returns a promise, 
  and within such a function, you can use await to 
  pause execution until a promise settles.

Callback hell, often referred to as Pyramid of Doom,
describes a situation in JavaScript where multiple nested
callbacks become difficult to manage, leading to unreadable and
unmaintainable code. It often arises when performing multiple
asynchronous operations that depend on the completion of previous
operations. The code starts to take on a pyramidal shape due to
the nesting.
    callAsync1(function () {
  callAsync2(function () {
    callAsync3(function () {
      callAsync4(function () {
        callAsync5(function () {
          // ...
        });
      });
    });
  });
});
    Strategies to avoid callback hell:
    Developers can address or avoid callback hell by using
     strategies like modularizing the code into named functions, 
     using asynchronous control flow libraries, or leveraging modern
      JavaScript features like Promises and async/await to write more
       linear,readable asynchronous code.
       Promise chaining
       callAsync1()
        .then(() => callAsync2())
        .then(() => callAsync3())
        .then(() => callAsync4())
        .then(() => callAsync5())
        .catch((err) => console.error(err));
    
    Async/await
    async function asyncCall() {
  try {
    await callAsync1();
    await callAsync2();
    await callAsync3();
    await callAsync4();
    await callAsync5();
  } catch (err) {
    console.error(err);
  }
}

#Event bubbling is a concept in the Document Object Model (DOM)
 that describes the way in which events propagate or "bubble up"
  through the hierarchy of nested elements in the DOM.

When an event, such as a mouse click,
occurs on a DOM element, the event will be handled by the element
first, then its parent element, and so on, until the event reaches
the root element. This behavior is called event bubbling.
    const parent = document.querySelector('.parent');
const child = document.querySelector('.child');

// Scenario of clicking on the child element
parent.addEventListener('click', () => {
  console.log('Handled Last');
});

child.addEventListener('click', () => {
  console.log('Handled First');
});
    In the above example, when you click on the child element,
     the event will be handled by the child element first, 
     then its parent element, and so on, to the root element 
     unless you stop the propagation (event.stopPropagation())
      of the event.

    Event capturing is the first phase of event propagation.
     In this phase, the event is captured by the outermost element 
     and propagated to the inner elements. It is also known as 
     trickling. It is the opposite of event bubbling.

The spread operator in JavaScript is represented by three dots (...)
. It allows the elements of an array or properties of an object to 
be expanded or "spread" into individual elements or properties. 
This can be useful in various contexts, such as when passing 
elements as function arguments,
    cloning arrays and objects, or merging arrays and objects.
    const roadmaps = ['JavaScript', 'React', 'Node.js'];
    const bestPractices = ['AWS', 'API Security'];

    const resources = [...roadmaps, ...bestPractices];
    console.log(resources); // ['JavaScript', 'React', 'Node.js', 'AWS', 'API Security']

const roadmap = {
  name: 'JavaScript',
  type: 'dynamic',
};

const roadmapClone = { ...roadmap }; // shallow copy
console.log(roadmapClone); // { name: 'JavaScript', type: 'dynamic' }

The core difference between Promise.all() and Promise.allSettled()
 is that Promise.all() rejects immediately if any of the promises 
 reject whereas Promise.allSettled() waits for all of the promises
  to settle\(either resolve or reject) and then returns the result.

  Initialize
  const promise1 = Promise.resolve('Promise 1 resolved');
  const promise2 = Promise.reject('Promise 2 rejected');
  Using Promise.all()
    Promise.all([promise1, promise2])
  .then((values) => {
    console.log(values);
  })
  .catch((error) => {
    console.log('An error occurred in Promise.all():', error);
  });

// Output:
// An error occurred in Promise.all(): Promise 2 rejected
    In the above code, the Promise.all() rejects immediately when any of the promise2 rejects.

Using Promise.allSettled()
Promise.allSettled([promise1, promise2]).then((results) => {
  results.forEach((result, index) => {
    if (result.status === 'fulfilled') {
      console.log(
        `Promise ${index + 1} was fulfilled with value:`,
        result.value
      );
    } else {
      console.log(
        `Promise ${index + 1} was rejected with reason:`,
        result.reason
      );
    }
  });
});

// Output:
// Promise 1 was fulfilled with value: Promise 1 resolved
// Promise 2 was rejected with reason: Promise 2 rejected
In the above code, the Promise.allSettled() 
waits for all of the promises to settle 
(either resolve or reject) and then returns the result.


