  child property or parent property 
       child property-> order: 0(by default)
            order: 1 or higher will make it to the end.
            0  0 0 0 0 0 1 2 3 10 etc.
    
  parent property->      flex-wrap :nowrap(default)
        justify-content: work on main axis
                    [flex-start,flex-end,center,space-between,space-around,space-evenly]
        align-items:set or work the distribution along the cross axis
                   to make it work we have to set our container bigger. like 70vh: viewport height -set height of the window we are viewing.
                    [flex-start,flex-end,center,Baseline,Stratch]

children    indipendent item target--> align-self
    align-content: similler to align-items but only works when flex-wrap is set to wrap
    

flexbox cheatsheet guide: https://css-tricks.com/snippets/css/a-guide-to-flexbox/ 
    example Content:
                    https://appbrewery.github.io/flex-layout/
EXercise:   https://appbrewery.github.io/flexboxfroggy/ 


flex-flow:column-reverse wrap-reverse;
justify-content: center;
align-content: space-between;


The frogs are spread all over the pond, but the lilypads are bunched at the top.
You can use align-content to set how multiple lines are spaced apart from each other.
This property takes the following values:

flex-start: Lines are packed at the top of the container.
flex-end: Lines are packed at the bottom of the container.
center: Lines are packed at the vertical center of the container.
space-between: Lines display with equal spacing between them.
space-around: Lines display with equal spacing around them.
stretch: Lines are stretched to fit the container.
This can be confusing, but align-content determines the spacing between lines,
while align-items determines how the items as a whole are aligned within the container.
 When there is only one line, align-content has no effect.